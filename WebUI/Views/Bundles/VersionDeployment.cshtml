@using MvcSiteMapProvider.Reflection
@using Newtonsoft.Json.Linq
@{
    ViewBag.Title = "Index";
    ViewBag.PageClass = "bundlesPage";

    Layout = "~/Views/Shared/_Layout.cshtml";
    BundleVersion bundleVersion = this.ViewBag.BundleVersion;

}

<div class="container">

    <h1>
        <div class="row">
            <div class="col-md-10">
                @bundleVersion.Bundle.Name @bundleVersion.Name <small>Bundle</small>
            </div>
            <div class="col-md-2 text-right">
                <button class="btn btn-default btn-lg">Configure</button>
            </div>
        </div>
    </h1>

    <hr />

    <ul class="nav nav-pills" role="tablist">
        <li role="presentation"><a href="@Url.Action("VersionProjects", new { id = bundleVersion.Id })">Projects</a></li>
        <li role="presentation" class="active"><a href="@Url.Action("VersionDeployment", new { id = bundleVersion.Id })">Deployment process</a></li>
        <li role="presentation"><a href="@Url.Action("VersionPackages", new { id = bundleVersion.Id })">Packages & Publications</a></li>
        <li role="presentation"><a href="@Url.Action("VersionVariables", new { id = bundleVersion.Id })">Local variables</a></li>
    </ul>
    
    <hr />

    @RenderSteps(bundleVersion, bundleVersion.DeploymentSteps)
    
    @if (bundleVersion.DeploymentSteps.Count > 0)
    {
        <hr />
    }
    
    <a class="btn btn-default" href="@Url.Action("AddStep", "BundleVersionDeployment", new { id = bundleVersion.Id})">Add step</a>

</div>

@helper RenderSteps(BundleVersion bundleVersion, IEnumerable<DeploymentStep> steps)
{
    int stepCounter = 0;
    
    foreach (DeploymentStep deploymentStep in steps.OrderBy(ds => ds.OrderIndex))
    {
        stepCounter++;
        
        switch (deploymentStep.Type)
        {
            case DeploymentStepType.DeployWebSite:
                @RednerDeployWebSiteStep(bundleVersion, deploymentStep, stepCounter)
                break;

            case DeploymentStepType.RunPowerShellScript:
            @RenderRunPowerShellScript(bundleVersion, deploymentStep, stepCounter)
                break;

            case DeploymentStepType.CopyFiles:
            @RenderCopyFilesStep(bundleVersion, deploymentStep, stepCounter)
                break;

            case DeploymentStepType.Configuration:
            @RenderConfigurationStep(bundleVersion, deploymentStep, stepCounter)
                break;

            case DeploymentStepType.UpdateHostsFile:
            @RenderHostsStep(bundleVersion, deploymentStep, stepCounter)
                break;

            case DeploymentStepType.RunSQLScript:
            @RenderSQLStep(bundleVersion, deploymentStep, stepCounter)
                break;

            case DeploymentStepType.DeployDacpac:
            @RenderDacpacStep(bundleVersion, deploymentStep, stepCounter)
                break;
        }
        
        <br/>
    }
}

@helper RenderControlButtons(BundleVersion bundleVersion, DeploymentStep deploymentStep)
{
    if (this.ViewBag.AllowedActions.Contains(UserRoleAction.DeploymentChangeSteps))
    {
         <a class="btn btn-default" href="@Url.Action("MoveUp", "BundleVersionDeployment", new {bundleVersionId = bundleVersion.Id, deploymentStepId = deploymentStep.Id})">
             <img src="~/Resources/Layout/Images/Icons/up16.png" />
         </a>
         <a class="btn btn-default" href="@Url.Action("MoveDown", "BundleVersionDeployment", new {bundleVersionId = bundleVersion.Id, deploymentStepId = deploymentStep.Id})">
             <img src="~/Resources/Layout/Images/Icons/down16.png" />
         </a>
         <a class="btn btn-default" href="@Url.Action("EditStep", "BundleVersionDeployment", new {id = bundleVersion.Id, deploymentStepId = deploymentStep.Id})">
             <img src="~/Resources/Layout/Images/Icons/settings16.png" />
         </a>
    }
}

@helper RednerDeployWebSiteStep(BundleVersion bundleVersion, DeploymentStep deploymentStep, int stepCounter)
{
    ProjectVersion projectVersion = bundleVersion.ProjectVersions.First(p => p.Id == deploymentStep.GetIntProperty("ProjectId", 0));

    <h3>
        <div class="row">
            <div class="col-sm-7">
                @(stepCounter). Deploy: @deploymentStep.GetStringProperty("IIS.SiteName") <small>IIS</small>
            </div>
            <div class="col-sm-5 text-right">@RenderControlButtons(bundleVersion, deploymentStep)</div>
        </div>
    </h3>
    <div class="row text-muted">
        <div class="col-md-6">
            <ul>
                <li>Roles:
                                
                    @foreach (MachineRole role in deploymentStep.MachineRoles)
                    {
                        <span class="label label-default">@role.Name</span>
                    }
                </li>
                <li>Project: @projectVersion.SourceControlVersion.SourceControl.Name / @projectVersion.SourceControlVersion.Name / @projectVersion.Name</li>
                <li>Destination: @deploymentStep.GetStringProperty("IIS.DestinationPath")</li>
                <li>Enabled AppOffilne page: @deploymentStep.GetStringProperty("EnabledAppOffilnePage")</li>
                <li>Bindings:
                    @if (deploymentStep.GetDynamicProperty("IIS.Bindings") != null)
                    {
                        <ul>
                            @foreach (dynamic binding in deploymentStep.GetDynamicProperty("IIS.Bindings"))
                            {
                                <li>@binding.protocol, @binding.host, @binding.port

                                @if (!string.IsNullOrEmpty((string)binding.certificateName) || !string.IsNullOrEmpty((string)binding.IP))
                                {
                                    <ul>
                                        @if (!string.IsNullOrEmpty((string)binding.certificateName))
                                        {
                                            <li>Certificate: @binding.certificateName</li>
                                        }
                                        @if (!string.IsNullOrEmpty((string)binding.IP))
                                        {
                                            <li>IP: @binding.IP</li>
                                        }
                                    </ul>
                                }
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <span>not set</span>
                    }
                </li>
            </ul>
        </div>
    </div>
}

@helper RenderDacpacStep(BundleVersion bundleVersion, DeploymentStep deploymentStep, int stepCounter)
{
    ProjectVersion projectVersion = bundleVersion.ProjectVersions.First(p => p.Id == deploymentStep.GetIntProperty("ProjectId", 0));

    <h3>
        <div class="row">
            <div class="col-sm-7">
                @(stepCounter). Dacpac: @deploymentStep.GetStringProperty("Step.Title") <small>DACPAC</small>
            </div>
            <div class="col-sm-5 text-right">@RenderControlButtons(bundleVersion, deploymentStep)</div>
        </div>
    </h3>
    <div class="row text-muted">
        <div class="col-md-12">
            <ul>
                <li>Roles:
                                
                    @foreach (MachineRole role in deploymentStep.MachineRoles)
                    {
                        <span class="label label-default">@role.Name</span>
                    }
                </li>
                <li>Project: @projectVersion.SourceControlVersion.SourceControl.Name / @projectVersion.SourceControlVersion.Name / @projectVersion.Name</li>
                <li>
                    Target database:
                    @deploymentStep.GetStringProperty("TargetDatabase")
                </li>
                <li>
                    Connection string:
                    <pre>@deploymentStep.GetStringProperty("ConnectionString")</pre>
                </li>
                <li>
                    Custom configuration:
                    <pre>@deploymentStep.GetStringProperty("CustomConfiguration")</pre>
                </li>
            </ul>
        </div>
    </div>
}

@helper RenderRunPowerShellScript(BundleVersion bundleVersion, DeploymentStep deploymentStep, int stepCounter)
{
    <h3>
        <div class="row">
            <div class="col-sm-7">
                @(stepCounter). Script: @deploymentStep.GetStringProperty("Step.Title") <small>PowerShell</small>
            </div>
            <div class="col-sm-5 text-right">@RenderControlButtons(bundleVersion, deploymentStep)</div>
        </div>
    </h3>
}

@helper RenderCopyFilesStep(BundleVersion bundleVersion, DeploymentStep deploymentStep, int stepCounter)
{
    ProjectVersion projectVersion = bundleVersion.ProjectVersions.First(p => p.Id == deploymentStep.GetIntProperty("ProjectId", 0));
    
    <h3>
        <div class="row">
            <div class="col-sm-7">
                @(stepCounter). Deploy files: @deploymentStep.GetStringProperty("Step.Title") <small>ZIP</small>
            </div>
            <div class="col-sm-5 text-right">@RenderControlButtons(bundleVersion, deploymentStep)</div>
        </div>
    </h3>
    <div class="row text-muted">
        <div class="col-md-6">
            <ul>
                <li>
                    Roles:

                    @foreach (MachineRole role in deploymentStep.MachineRoles)
                    {
                        <span class="label label-default">@role.Name</span>
                    }
                </li>
                <li>Project: @projectVersion.SourceControlVersion.SourceControl.Name / @projectVersion.SourceControlVersion.Name / @projectVersion.Name</li>
                <li>Destination: @deploymentStep.GetStringProperty("DestinationPath")</li>
                <li>
                    Custom configuration:
                    <pre>@deploymentStep.GetStringProperty("CustomConfiguration")</pre>
                </li>
            </ul>
        </div>
    </div>
}

@helper RenderHostsStep(BundleVersion bundleVersion, DeploymentStep deploymentStep, int stepCounter)
{
    <h3>
        <div class="row">
            <div class="col-sm-7">
                @(stepCounter). Update hosts: @deploymentStep.GetStringProperty("Step.Title") <small>HOSTS</small>
            </div>
            <div class="col-sm-5 text-right">@RenderControlButtons(bundleVersion, deploymentStep)</div>
        </div>
    </h3>
    <div class="row text-muted">
        <div class="col-md-12">
            <ul>
                <li>
                    Roles:

                    @foreach (MachineRole role in deploymentStep.MachineRoles)
                    {
                        <span class="label label-default">@role.Name</span>
                    }
                </li>
                <li>
                    config:
                    <pre>@deploymentStep.GetStringProperty("ConfigurationJson")</pre>
                </li>
            </ul>
        </div>
    </div>
}


@helper RenderSQLStep(BundleVersion bundleVersion, DeploymentStep deploymentStep, int stepCounter)
{
    <h3>
        <div class="row">
            <div class="col-sm-7">
                @(stepCounter). Run SQL: @deploymentStep.GetStringProperty("Step.Title") <small>SQL</small>
            </div>
            <div class="col-sm-5 text-right">@RenderControlButtons(bundleVersion, deploymentStep)</div>
        </div>
    </h3>
    <div class="row text-muted">
        <div class="col-md-12">
            <ul>
                <li>
                    Roles:

                    @foreach (MachineRole role in deploymentStep.MachineRoles)
                    {
                        <span class="label label-default">@role.Name</span>
                    }
                </li>
                <li>
                    connection string:
                    <pre>@deploymentStep.GetStringProperty("ConnectionString")</pre>
                </li>
                <li>
                    command:
                    <pre>@deploymentStep.GetStringProperty("Command")</pre>
                </li>
            </ul>
        </div>
    </div>
}

@helper RenderConfigurationStep(BundleVersion bundleVersion, DeploymentStep deploymentStep, int stepCounter)
{
    <h3>
        <div class="row">
            <div class="col-sm-7">
                @(stepCounter). Config: @deploymentStep.GetStringProperty("Step.Title") <small>Configuration</small>
            </div>
            <div class="col-sm-5 text-right">@RenderControlButtons(bundleVersion, deploymentStep)</div>
        </div>
    </h3>
    <div class="row text-muted">
        <div class="col-md-12">
            <ul>
                @foreach (string file in deploymentStep.GetStringProperties("File"))
                {
                    <li>File: @file</li>
                }
                <li>
                    Roles:

                    @foreach (MachineRole role in deploymentStep.MachineRoles)
                    {
                        <span class="label label-default">@role.Name</span>
                    }
                </li>
                <li>
                    <div>content</div>
                    
                    <pre>@deploymentStep.GetStringProperty("SetValues")</pre>
@*
                    @if ( != null)
                    {
                        <div class="panel panel-default">
                            <div class="panel-body">
                                @foreach (dynamic node in deploymentStep.GetDynamicProperty("SetValues").Properties())
                                {
                                    @ConfigurationRecursiveWriter(node)
                                }
                            </div>
                        </div>
                    }*@
                </li>

            </ul>
        </div>
    </div>
}

@helper ConfigurationRecursiveWriter(dynamic node)
{
    if (node is JArray)
    {
        foreach (dynamic item in node.Children())
        {
            @ConfigurationRecursiveWriter(item)
        }

        return;
    }

    <div>
        
        @if (node is JProperty)
        {
            @node.Name
    
            if (node.Value is JValue)
            {
                @: : <pre>@node.Value</pre>
            }
        }

        @foreach (dynamic item in node.Children())
        {
            <div style="margin-left: 20px;">
                @ConfigurationRecursiveWriter(item)
            </div>
        }
    </div>

}



