@using AspNetDeploy.WebUI.Models
@using Environment = AspNetDeploy.Model.Environment
@{
    ViewBag.Title = "Index";
    ViewBag.PageClass = "versionPackagesPage";

    Layout = "~/Views/Shared/_Layout.cshtml";
    IList<Environment> environments = this.ViewBag.Environments;
    BundleVersion bundleVersion = this.ViewBag.BundleVersion;


    IList<Package> orderedPackages = bundleVersion.Packages.OrderByDescending(p => p.CreatedDate).ToList();
    Package latestPackage = orderedPackages.FirstOrDefault();

    IList<BundleRevision> revisions = this.ViewBag.Revisions;

    Dictionary<int, int> activePublications = this.ViewBag.ActivePublications;

    //DateTime publicationsSince = DateTime.Now.AddMonths(-2);

    //if (bundleVersion.Bundle.IsSingleInstance)
    //{
    //    allPublications = bundleVersion.Bundle.BundleVersions.SelectMany(bv => bv.Packages).SelectMany(p => p.Publications).Where(p => p.CreatedDate > publicationsSince).OrderByDescending(p => p.CreatedDate).ToList();
    //}
    //else
    //{
    //    allPublications = bundleVersion.Packages.SelectMany(p => p.Publications).OrderByDescending(p => p.CreatedDate).ToList();
    //}

}

<div class="container">

    <h1>
        <div class="row">
            <div class="col-md-10">
                @bundleVersion.Bundle.Name @bundleVersion.Name
                <span class="badge rounded-pill text-bg-secondary">Bundle</span>
            </div>
            @*<div class="col-md-2 text-right">
                <button class="btn btn-outline-dark btn-lg">Configure</button>
            </div>*@
        </div>
    </h1>
    <br />


    <ul class="nav nav-pills">
        <li class="nav-item"><a class="nav-link" href="@Url.Action("VersionProjects", new { id = bundleVersion.Id })">Projects</a></li>
        <li class="nav-item"><a class="nav-link" href="@Url.Action("VersionDeployment", new { id = bundleVersion.Id })">Deployment process</a></li>
        <li class="nav-item active"><a class="nav-link" href="#">Packages & Publications</a></li>
        <li class="nav-item"><a class="nav-link" href="@Url.Action("VersionVariables", new { id = bundleVersion.Id })">Local variables</a></li>
    </ul>


    <div class="section">

        <h3>Latest changes</h3>

        @if (!revisions.Any())
        {
            <p>No changes</p>
        }
        else
        {
            <div>
                @foreach (BundleRevision revision in revisions)
                {
                    <div class="row">
                        <div class="col-md-5">
                            <span class="small">@revision.CreatedDate.ToLocalTime().ToString("dd MMMM yyyy H:mm") \ @revision.SourceName \ @revision.Author</span>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-5">
                            @if (string.IsNullOrWhiteSpace(revision.Commit))
                            {
                                <small>no message</small>
                            }
                            else
                            {
                                <div class="commit">
                                    @revision.Commit
                                </div>
                            }
                           
                        </div>
                    </div>
                    <br />
                }

            </div>
        }

        @*<hr/>

            <h3>Latest package</h3>

            @if (latestPackage != null)
            {
                <p>@latestPackage.CreatedDate.ToLocalTime().ToString("d MMMM yyyy"), @latestPackage.CreatedDate.ToLocalTime().ToString("H:mm")</p>
            }
            else
            {
                <p>no packages</p>
            }*@

    </div>


    <div class="section">

        <h3>Packages</h3>

        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Build date</th>
                    @foreach (Environment environment in environments)
                    {
                        <th>@environment.Name</th>
                    }
                </tr>
            </thead>


            @{
                int packageIndex = orderedPackages.Count;
            }
            <tbody>
                @foreach (Package package in orderedPackages)
                {
                    <tr>
                        <td>@Html.ActionLink(package.Id.ToString(), "Details", "Packages", new { id = package.Id }, null)</td>
                        <td>@package.CreatedDate.ToLocalTime().ToString("d MMMM yyyy"), @package.CreatedDate.ToLocalTime().ToString("H:mm")</td>

                        @foreach (Environment environment in environments)
                        {
                            List<Publication> packagePublications = package.Publications.Where(p => p.EnvironmentId == environment.Id).ToList();
                            Publication latestPackagePublication = packagePublications.OrderByDescending(p => p.CreatedDate).FirstOrDefault();




                            //Publication latestSuccessPublication = allPublications.Where(p => p.State == PublicationState.Complete).FirstOrDefault(p => p.Environment == environment);

                            bool isActiveOnEnvironment = false;

                            if (activePublications.ContainsKey(environment.Id))
                            {
                                if (activePublications[environment.Id] == package.Id)
                                {
                                    isActiveOnEnvironment = true;
                                }
                            }

                            //if (latestSuccessPublication != null)
                            //{
                            //    if (latestSuccessPublication.Package == package)
                            //    {
                            //        isActiveOnEnvironment = true;
                            //    }
                            //}

                            bool isQueued = latestPackagePublication != null && latestPackagePublication.State == PublicationState.Queued;
                            bool isInProgress = latestPackagePublication != null && latestPackagePublication.State == PublicationState.InProgress;

                            string rowClass = "";

                            /*if (latestPackagePublication != null )
                            {
                                switch (latestPackagePublication.State)
                                {
                                    case PublicationState.Complete:
                                        rowClass = "success";
                                        break;

                                    case PublicationState.Error:
                                        rowClass = "error";
                                        break;

                                    case PublicationState.Queued:
                                    case PublicationState.InProgress:
                                        rowClass = "info";
                                        break;
                                }

                            }*/


                            if (isActiveOnEnvironment)
                            {
                                rowClass = "table-success";
                            }
                            else if (isQueued)
                            {
                                rowClass = "info";
                            }
                            else if (isInProgress)
                            {
                                rowClass = "primary";
                            }

                            <td class="@rowClass">
                                @if (packagePublications.Count == 0)
                                {
                                    @:&mdash;
                                }
                                else
                                {
                                    <div class="float-end">
                                        @if (isActiveOnEnvironment)
                                        {
                                            <span><b>Active</b></span>
                                        }
                                        else if (isQueued)
                                        {
                                            <span><b>Queued</b></span>
                                        }

                                        @if (package.ApprovedOnEnvironments.Any(a => a.Environment == environment))
                                        {
                                            <span class="badge rounded-pill text-bg-success">approved</span>
                                        }
                                        else
                                        {
                                            @*<span class="label label-info">pending</span>*@
                                        }
                                    </div>

                                    foreach (Publication publication in packagePublications.OrderByDescending(p => p.CreatedDate))
                                    {
                                        <div>
                                            <a href="@Url.Action("Details", "Publications", new { id = publication.Id })">@publication.Id – @publication.CreatedDate.ToLocalTime().ToString("d MMMM yyyy"), @publication.CreatedDate.ToLocalTime().ToString("H:mm")</a>
                                            <span> – @publication.State</span>
                                        </div>
                                    }


                                }
                            </td>
                        }

                    </tr>

                    packageIndex--;
                }
            </tbody>
        </table>
    </div>
</div>

@helper ProjectGroup(BundleVersion bundleVersion, string name, ProjectType projectType)
{
    <h3>@name</h3>

    if (bundleVersion.ProjectVersions.Any(pv => pv.ProjectType.HasFlag(projectType)))
    {
        foreach (ProjectVersion projectVersion in bundleVersion.ProjectVersions.Where(pv => pv.ProjectType.HasFlag(projectType)))
        {
            <div class="row">
                <div class="col-sm-6">
                    @if (projectVersion.ProjectType.HasFlag(ProjectType.Web))
                    {
                        <img src="~/Resources/Layout/Images/Icons/VsWebProject.PNG" />
                    }
                    else if (projectVersion.ProjectType.HasFlag(ProjectType.Test))
                    {
                        <img src="~/Resources/Layout/Images/Icons/VsTestProject.PNG" />
                    }
                    <a href="@Url.Action("Details", "ProjectVersions", new { id = projectVersion.Id })">@projectVersion.Name @projectVersion.SourceControlVersion.Name</a>
                </div>
            </div>
        }
    }
    else
    {
        <div>–</div>
    }
    <br />
}