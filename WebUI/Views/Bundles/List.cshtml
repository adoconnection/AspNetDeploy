@using AspNetDeploy.WebUI.Models
@using Environment = AspNetDeploy.Model.Environment
@{
    ViewBag.Title = "Index";
    ViewBag.PageClass = "bundlesPage";
    Layout = "~/Views/Shared/_Layout.cshtml";

    IList<Environment> environments = this.ViewBag.Environments;
}

<div class="container">
    

    @foreach (BundleInfo bundleInfo in this.ViewBag.Bundles)
    {
        <h1>
            @Html.ActionLink(bundleInfo.Bundle.Name, "Details", new { id = bundleInfo.Bundle.Id })
        </h1>
        <hr />

        foreach (BundleVersionInfo bundleVersionInfo in bundleInfo.BundleVersionsInfo)
        {
            <h3>
                @Html.ActionLink(bundleVersionInfo.BundleVersion.Name, "VersionPackages", new { id = bundleVersionInfo.BundleVersion.Id })

                @if (bundleVersionInfo.BundleVersion.IsHead)
                {
                    <small>Head</small>
                }

                @if (bundleVersionInfo.BundleVersion.GetIntProperty("AutoDeployToEnvironment") > 0)
                {
                    <small>/ Auto deploy to @environments.First(e => e.Id == bundleVersionInfo.BundleVersion.GetIntProperty("AutoDeployToEnvironment")).Name</small>
                }

                <span id="@("idBundleVersionState" + bundleVersionInfo.BundleVersion.Id)">
                    <img class="loadingIcon" src="~/Resources/Layout/Images/vs-loading-colored.gif" style="display: none;" />
                    <small class="status" style="display: none;"></small>
                </span>

            </h3>

            <div id="@("idBundleVersionProgress" + bundleVersionInfo.BundleVersion.Id)" class="progress" style="display: none; height: 7px;">
                <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 40%">
                    <span class="sr-only"></span>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-6">
                    

                    @if (bundleVersionInfo.BundleVersion.ProjectVersions.Count == 0)
                    {
                        <a href="@Url.Action("AddStep", "BundleVersionDeployment", new { id = bundleVersionInfo.BundleVersion.Id, deploymentStepType = DeploymentStepType.DeployWebSite })">Add project</a>
                    }
                    else
                    {
                        foreach (ProjectVersion projectVersion in bundleVersionInfo.BundleVersion.ProjectVersions)
                        {
                            bool isArchived = projectVersion.SourceControlVersion.WorkState != SourceControlVersionWorkState.Normal;
                            
                            <div>
                                <small class="@(isArchived ? "text-muted" : "")">
                                    @projectVersion.SourceControlVersion.SourceControl.Name / @projectVersion.SourceControlVersion.Name / @projectVersion.Name
                                    
                                    @if (isArchived)
                                    {
                                        <span>(archived)</span>
                                    }

                                    <span id="@("idProjectVersionState" + projectVersion.Id)">
                                        <img class="loadingIcon" src="~/Resources/Layout/Images/vs-loading-colored.gif" style="display: none;" />
                                        <span class="status text-muted" style="display: none;"></span>
                                    </span>
                                </small>
                            </div>
                        }
                    }

                </div>
                
                <br class="visible-xs" />

                <div class="col-sm-6 text-center">
                    
                    @foreach (Environment environment in environments)
                    {
                        IEnumerable<Publication> publications = bundleVersionInfo.BundleVersion.Packages.SelectMany(p => p.Publications);
                        Publication publication = publications.OrderByDescending(p => p.CreatedDate).FirstOrDefault(p => p.Environment == environment);

                        if (bundleVersionInfo.Environments.Contains(environment))
                        {
                            <div class="col-xs-4 col-sm-3">
                                <div>
                                    @environment.Name
                                </div>

                                @if (publication == null)
                                {
                                    <img src="~/Resources/Layout/Images/Icons/box-empty64.png" />
                                }
                                else
                                {
                                    switch (publication.State)
                                    {
                                        case PublicationState.Complete:
                                            <img src="~/Resources/Layout/Images/Icons/Package-Accept-64.png" />
                                            break;
                                        case PublicationState.Error:
                                            <img src="~/Resources/Layout/Images/Icons/Package-Warning64.png" />
                                            break;
                                        case PublicationState.InProgress:
                                            <img src="~/Resources/Layout/Images/Icons/Package-Progress64.png" />
                                            break;
                                        default:
                                            <img src="~/Resources/Layout/Images/Icons/package64.png" />
                                            break;
                                    }

                                    <div><small class="text-muted">@publication.CreatedDate.ToLocalTime().ToString("d MMMM yyyy")</small></div>
                                }

                            </div>
                        }
                    }

                </div>
            </div>

            <br />

        }


       @* foreach (ProjectVersionInfo projectInfo in bundleInfo.ProjectsInfo)
        {
            <div class="row machine">
                <div class="col-sm-8 col-md-6">
                    <div class="name">
                        <div>
                            @projectInfo.Project.SourceControl.Name / @projectInfo.Project.Name
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    
                </div>
            </div>
        }
        *@
    <br />
    }

</div>

<script>

    $(function ()
    {
        function updateStatuses()
        {
            var bundleStates =
            {
                "Idle": {
                    loadingIcon: false,
                    text: ''
                },
                "LoadingQueued": {
                    loadingIcon: false,
                    text: 'Loading queued'
                },
                "Loading": {
                    loadingIcon: true,
                    text: 'Loading'
                },
                "BuildQueued": {
                    loadingIcon: false,
                    text: 'Building queued'
                },
                "Building": {
                    loadingIcon: true,
                    text: 'Building'
                },
                "TestingQueued": {
                    loadingIcon: false,
                    text: 'Testing queued'
                },
                "Testing": {
                    loadingIcon: true,
                    text: 'Testing'
                },
                "PackagingQueued": {
                    loadingIcon: false,
                    text: 'Packaging queued'
                },
                "Packaging": {
                    loadingIcon: true,
                    text: 'Packaging'
                },
                "DeployingQueued": {
                    loadingIcon: false,
                    text: 'Deploying queued'
                },
                "Deploying": {
                    loadingIcon: true,
                    text: 'Deploying'
                }
            }

            var projectStates =
            {
                "Idle": {
                    loadingIcon: false,
                    text: ''
                },
                "QueuedToBuild": {
                    loadingIcon: false,
                    text: 'Build queued'
                },
                "Building": {
                    loadingIcon: true,
                    text: 'Building'
                },
                "Stopping": {
                    loadingIcon: true,
                    text: 'Stopping'
                },
                "Error": {
                    loadingIcon: false,
                    css: 'error',
                    text: 'Error'
                }
            }

            function updateStatus(element, newState)
            {
                var loadingIcon = element.find('.loadingIcon');
                var statusBox = element.find('.status');

                

                if (newState.text == statusBox.data('text'))
                {
                    return;
                }

                statusBox.attr('class', 'status text-muted ' + newState.css);
                statusBox.data('text', newState.text);

                loadingIcon[newState.loadingIcon ? 'fadeIn' : 'fadeOut']();
                statusBox[newState.text ? 'fadeIn' : 'fadeOut']();

                if (newState.text)
                {
                    statusBox.text(newState.text);
                }
            }

            function updateProgress(element, elapsedSecs, totalSecs)
            {
                if (totalSecs == 0)
                {
                    element.fadeOut();
                }
                else
                {
                    var progress = element.find('.progress-bar');
                    progress.width((elapsedSecs * 100 / totalSecs) + '%');
                    element.fadeIn();
                }
            }

            $.post('@Url.Action("GetBundleStates")').success(function (data)
            {
                for (var i = 0; i < data.length; i++)
                {
                    var item = data[i];
                    updateStatus($("#idBundleVersionState" + item.id), bundleStates[item.state]);
                    updateProgress($("#idBundleVersionProgress" + item.id), item.elapsedSecs, item.totalSecs);

                    for (var j = 0; j < item.projects.length; j++)
                    {
                        var project = item.projects[j];
                        updateStatus($("#idProjectVersionState" + project.id), projectStates[project.state]);
                    }
                }

            });
        }

        updateStatuses();
        setInterval(updateStatuses, 3000);

    });

</script>
