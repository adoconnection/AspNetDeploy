@using AspNetDeploy.WebUI.Models
@{
    ViewBag.Title = "Index";
    ViewBag.PageClass = "sourcesPage";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">

    @foreach (SourceControlInfo sourceControlInfo in this.ViewBag.SourceControls)
    {
        <h1 id="@("idSourceControl" + sourceControlInfo.SourceControl.Id)">
            @Html.ActionLink(sourceControlInfo.SourceControl.Name, "Details", new { id = sourceControlInfo.SourceControl.Id })
            @switch (sourceControlInfo.SourceControl.Type)
            {
                case SourceControlType.Svn:
                    <small>SVN</small>
                    break;

                case SourceControlType.Git:
                <small>Git</small>
                    break;

                case SourceControlType.FileSystem:
                <small>File system</small>
                    break;

                default:
                <small>Other</small>
                    break;
            }
            
        </h1>

        <hr />

        <div class="row">
            @{
                int index = 0;
            }

            @foreach (SourceControlVersionInfo sourceControlVersionInfo in sourceControlInfo.SourceControlVersionsInfo)
            {
                IEnumerable<IGrouping<string, ProjectVersionInfo>> groups = sourceControlVersionInfo.ProjectVersionsInfo.GroupBy(pvs => pvs.ProjectVersion.SolutionFile);

                <div class="col-sm-6">
                    <h3>
                        @sourceControlVersionInfo.SourceControlVersion.Name

                        @if (sourceControlVersionInfo.SourceControlVersion.IsHead)
                        {
                            <small>Head</small>
                        }
                        
                        @if (sourceControlVersionInfo.SourceControlVersion.ArchiveState == SourceControlVersionArchiveState.Archived)
                        {
                            <small>Archived</small>
                        }
                    
                        <span id="@("idSourceControlVersion" + sourceControlVersionInfo.SourceControlVersion.Id)">
                            <img class="loadingIcon" src="~/Resources/Layout/Images/vs-loading-colored.gif" style="display: none;" />    
                            <small class="status" style="display: none;"></small>
                        </span>

                    </h3>

                    @foreach (IGrouping<string, ProjectVersionInfo> group in groups)
                    {
                        foreach (ProjectVersionInfo projectVersionInfo in group.OrderBy( p => p.ProjectVersion.ProjectType).ThenBy( p => p.ProjectVersion.Name))
                        {
                            bool hasWeb = projectVersionInfo.ProjectVersion.ProjectType.HasFlag(ProjectType.Web);
                            bool hasTest = projectVersionInfo.ProjectVersion.ProjectType.HasFlag(ProjectType.Test);
                            bool hasConsole = projectVersionInfo.ProjectVersion.ProjectType.HasFlag(ProjectType.Console);
                            bool hasDatabase = projectVersionInfo.ProjectVersion.ProjectType.HasFlag(ProjectType.Database);
                            bool hasZip = projectVersionInfo.ProjectVersion.ProjectType.HasFlag(ProjectType.ZipArchive);
                            bool hasGulp  = projectVersionInfo.ProjectVersion.ProjectType.HasFlag(ProjectType.GulpFile);
                            double lastBuildDuration = projectVersionInfo.ProjectVersion.GetDoubleProperty("LastBuildDuration");
                            double lastPackageDuration = projectVersionInfo.ProjectVersion.GetDoubleProperty("LastPackageDuration");

                            if (hasWeb || hasTest || hasConsole || hasDatabase || hasZip || hasGulp)
                            {
                                <div>
                                    <a href="@Url.Action("Details", "ProjectVersions", new { id = projectVersionInfo.ProjectVersion.Id })">
                                        @if (hasWeb)
                                        {
                                            <img src="~/Resources/Layout/Images/Icons/VsWebProject.PNG" />
                                        }
                                        @if (hasTest)
                                        {
                                            <img src="~/Resources/Layout/Images/Icons/VsTestProject.png" />
                                        }
                                        @if (hasConsole)
                                        {
                                            <img src="~/Resources/Layout/Images/Icons/VsConsoleProject.PNG" />
                                        }
                                        @if (hasDatabase)
                                        {
                                            <img src="~/Resources/Layout/Images/Icons/VsDatabaseProject.PNG" />
                                        }
                                        @if (hasZip)
                                        {
                                            <img src="~/Resources/Layout/Images/Icons/zip32.png" />
                                        }

                                        @projectVersionInfo.ProjectVersion.Name

                                        @if (projectVersionInfo.ProjectVersion.BundleVersions.Count > 0)
                                        {
                                            <img src="~/Resources/Layout/Images/Icons/box16-2.png" />
                                        }
                                        else if (!projectVersionInfo.ProjectVersion.Project.GetBoolProperty("NotForDeployment"))
                                        {
                                            <img src="~/Resources/Layout/Images/Icons/new16.png" />
                                        }
                                        

                                        @if (lastBuildDuration > 5)
                                        {
                                            <small class="text-danger"><b>build time @lastBuildDuration.ToString("#.0") sec</b></small>
                                        } 
                                        else if (lastBuildDuration > 1)
                                        {
                                            <small class="text-warning">build time @lastBuildDuration.ToString("#.0") sec</small>
                                        }
                                        else
                                        {
                                        }
                                    
                                        @if (lastPackageDuration > 30)
                                        {
                                            if (lastBuildDuration > 1)
                                            {
                                                <span>&nbsp;&nbsp;</span>
                                            }
                                            <small class="text-danger"><b>package time @lastPackageDuration.ToString("#.0") sec</b></small>
                                        }
                                        else if (lastPackageDuration > 5)
                                        {
                                            if (lastBuildDuration > 1)
                                            {
                                                <span>&nbsp;&nbsp;</span>
                                            }
                                            <small class="text-warning">package time @lastPackageDuration.ToString("#.0") sec</small>
                                        }
                                        else
                                        {
                                        }
                                    
                                        <span id="@("idProjectVersion" + projectVersionInfo.ProjectVersion.Id)">
                                            <img class="loadingIcon" src="~/Resources/Layout/Images/vs-loading-colored.gif" style="display: none;" />
                                            <small class="status text-muted" style="display: none;"></small>
                                        </span>
                                    </a>
                                </div>
                            }
                        }
                        @*<div class="col-sm-6">
                            <img src="~/Resources/Layout/Images/Icons/VsSolution.png" />
                            @group.Key
                        </div>*@
                    }
                </div>

                index++;

                if (index % 2 == 0 && index > 1)
                {
                    <br style="clear: both;"/>    
                } 
            }
        </div>

        <br />
    }

</div>

<script>

    $(function ()
    {
        function updateStatuses()
        {
            var sourceControlStates =
            {
                "Idle": {
                    loadingIcon: false,
                    text: ''
                },
                "LoadingQueued": {
                    loadingIcon: false,
                    text: 'Loading queued'
                },
                "Loading": {
                    loadingIcon: true,
                    text: 'Loading'
                },
                "Archiving": {
                    loadingIcon: true,
                    text: 'Archiving'
                },
                "Stopping": {
                    loadingIcon: true,
                    text: 'Stopping'
                },
                "Error": {
                    loadingIcon: false,
                    text: 'Error'
                }
            }

            var projectStates =
            {
                "Idle": {
                    loadingIcon: false,
                    text: ''
                },
                "QueuedToBuild": {
                    loadingIcon: false,
                    text: 'Build queued'
                },
                "Building": {
                    loadingIcon: true,
                    text: 'Building'
                },
                "Stopping": {
                    loadingIcon: true,
                    text: 'Stopping'
                },
                "Error": {
                    loadingIcon: false,
                    text: 'Error'
                }
            }

            function updateStatus(element, newState)
            {
                var loadingIcon = element.find('.loadingIcon');
                var statusBox = element.find('.status');

                if (newState.text == statusBox.data('text'))
                {
                    return;
                }

                statusBox.data('text', newState.text);

                loadingIcon[newState.loadingIcon ? 'fadeIn' : 'fadeOut']();
                statusBox[newState.text ? 'fadeIn' : 'fadeOut']();

                if (newState.text)
                {
                    statusBox.text(newState.text);
                }
            }

            $.post('@Url.Action("GetSourceControlStates")').success(function (data)
            {
                for (var i = 0; i < data.length; i++)
                {
                    var item = data[i];
                    updateStatus($("#idSourceControlVersion" + item.id), sourceControlStates[item.state]);

                    for (var j = 0; j < item.projects.length; j++)
                    {
                        var project = item.projects[j];
                        updateStatus($("#idProjectVersion" + project.id), projectStates[project.state]);
                    }
                }

            });
        }

      //  updateStatuses();
      //  setInterval(updateStatuses, 3000);

    });

</script>
